exp_sim_var
# which the same as
exp_sim_var <- var(exp_sim_means)
exp_sim_var
# Theoretical standard deviation is calculated by the expression
exp_sim_sd_theoretical <- (1/lambda)/sqrt(n)
exp_sim_sd_theoretical
# and theoretical variance is standard deviation squared
exp_sim_var_theoretical <- ((1/lambda)/sqrt(n))^2
exp_sim_var_theoretical
exp_sim_sd_theoretical^2
# Standard deviation of our simulated exponentials is 0.7749455, with the theoretical standard deviation of 0.7905694.
# Variances obtained from simulations and theoretical calculations (sandard deviation squared) are 0.6005405 and 0.625, respectively.
?hist
?hist.probability
?scale
n(n(1,2,3),n(2,3,1),n(3,2,1))
c(c(1,2,3),c(2,3,1),c(3,2,1))
matrix(c(1,2,3),c(2,3,1),c(3,2,1))
?matrix
matrix(c(1,2,3,2,3,1,3,2,1))
matrix(c(1,2,3),c(2,3,1),c(3,2,1))
matrix(c(1,2,3),c(2,3,1),c(3,2,1),c(12413,1341,134))
matrix(c(1,2,3),c(2,3,1),c(3,2,1),nrow=3,ncol=3)
matrix(c(1,2,3),c(2,3,1),c(3,2,1),3,3)
matrix(c(1,2,3),c(2,3,1),c(3,2,1),3,3,dimnames=null)
matrix(c(1,2,3),c(2,3,1),c(3,2,1),nrow=3,ncol=3)
matrix(c(1,2,3),c(2,3,1),c(3,2,1),nrow=3,ncol=3,dimnames(c("en", "dva","tri")))
matrix(seq(1:9),nrow=1,ncol=3)
matrix(seq(1:9),nrow=3,ncol=3)
matrix(seq(9:1),nrow=3,ncol=3)
matrix(-seq(1:9),nrow=3,ncol=3)
scale(matrix(-seq(1:9),nrow=3,ncol=3))
hist(exp_sim_means)
xfit<-seq(min(exp_sim_means),max(exp_sim_means),length=40)
yfit<-dnorm(xfit,mean=mean(exp_sim_means),sd=sd(exp_sim_means))
yfit <- yfit*diff(h$mids[1:2])*length(exp_sim_means)
lines(xfit, yfit, col="blue", lwd=2)
xfit<-seq(min(exp_sim_means),max(exp_sim_means),length=40)
yfit<-dnorm(xfit,mean=mean(exp_sim_means),sd=sd(exp_sim_means))
yfit <- yfit*diff(h$mids[1:2])*length(exp_sim_means)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(exp_sim_means)
xfit<-seq(min(exp_sim_means),max(exp_sim_means),length=40)
yfit<-dnorm(xfit,mean=mean(exp_sim_means),sd=sd(exp_sim_means))
yfit <- yfit*diff(h$mids[1:2])*length(exp_sim_means)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(exp_sim_means)
xfit<-seq(min(exp_sim_means),max(exp_sim_means),length=40)
yfit<-dnorm(xfit,mean=mean(exp_sim_means),sd=sd(exp_sim_means))
yfit <- yfit*diff(h$mids[1:2])*length(exp_sim_means)
lines(xfit, yfit, col="red", lwd=2)
curve(dnorm(x,5,1),-3,3,col="blue",add=T)
dnorm(x,5,1)
?dnorm
dnorm(0,5,1)
dnorm(1:5,5,1)
h <- hist(exp_sim_means)
xfit<-seq(min(exp_sim_means),max(exp_sim_means),length=40)
yfit<-dnorm(xfit,mean=mean(exp_sim_means),sd=sd(exp_sim_means))
yfit <- yfit*diff(h$mids[1:2])*length(exp_sim_means)
lines(xfit, yfit, col="red", lwd=2)
curve(dnorm(3:8,5,1),-3,3,col="blue",add=T)
curve(dnorm(x,5,1),-3,3,col="blue",add=T)
curve(dnorm(x,0,1),-3,3,col="blue",add=T)
curve(dnorm(x,0,1),3,8,col="blue",add=T)
curve(dnorm(x,250,1),3,8,col="blue",add=T)
scale(exp_sim_means)
exp_sim_means_scaled <- scale(exp_sim_means)
hist(exp_sim_means_scaled,probability=T, main="", ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled))
# Compare with the standard normal distribution
curve(dnorm(x,0,1), -3, 3, col="red", add=T)
exp_sim_means_scaled <- scale(exp_sim_means)
hist(exp_sim_means_scaled,probability=T, main="Comparison of simulated exponentials and a normal distribution", ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled)) # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
exp_sim_means_scaled <- scale(exp_sim_means)
hist(exp_sim_means_scaled,
probability=T,
main="Comparison of simulated exponentials and a normal distribution",
ylab="Scaled means"
ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled)) # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
?hist
hist(exp_sim_means_scaled,
probability=T,
main="Comparison of simulated exponentials and a normal distribution",
ylab="Scaled means",
ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled)) # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
exp_sim_means_scaled <- scale(exp_sim_means)
hist(exp_sim_means_scaled,
probability=T,
main="Comparison of simulated exponentials and a normal distribution",
xlab="Scaled means",
ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled)) # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
hist(exp_sim_means_scaled,
probability=T,
main="Comparison of simulated exponentials and a normal distribution",
xlab="Scaled means",
ylim=c(0, 0.5),
col="blue")
lines(density(exp_sim_means_scaled)) # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
hist(exp_sim_means_scaled,
probability=T,
main="Comparison of simulated exponentials and a normal distribution",
xlab="Scaled means",
ylim=c(0, 0.5))
lines(density(exp_sim_means_scaled), col="blue") # distribution of our means
curve(dnorm(x,0,1), -3, 3, col="red", add=T) # normal distribution
?legend
main="Comparison of simulated exponentials mean distribution and a normal distribution",
data(ToothGrowth)
str(ToothGrowth)
library(datasets)
tg <- ToothGrowth
tg$dose <- as.factor(tg$dose)
str(tg)
ggplot(data=tg,aes(x=dose,y=len,fill=supp))
library(ggplot2)
ggplot(data=tg,aes(x=dose,y=len,fill=supp))
ggplot(data=tg,aes(x=dose,y=len,fill=supp)) + geam_bar(stat="identity") + facet_grid(.~supp)
ggplot(data=tg,aes(x=dose,y=len,fill=supp)) + geom_bar(stat="identity") + facet_grid(.~supp)
ggplot(data=tg, aes(x=dose, y=len))
+ geom_boxplot(aes(fill=dose))
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Dose"))
ggplot(data=tg, aes(x=dose, y=len))
+ geom_boxplot(aes(fill=dose))
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Dose"))
require(ggplot2)
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len))
+ geom_boxplot(aes(fill=dose))
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Dose"))
require(ggplot2)
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
library(datasets)
tg <- ToothGrowth
tg$dose <- as.factor(tg$dose)
str(tg)
```
```{r}
require(ggplot2)
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len))
+ geom_boxplot(aes(fill=dose))
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Dose"))
tg <- ToothGrowth
tg$dose <- as.factor(tg$dose)
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len, fill=supp)) + geom_bar(stat="identity") + facet_grid(. ~ supp) + xlab("Dose [mg]") + ylab("Tooth length") + guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len, fill=supp))
+ geom_bar(stat="identity")
+ facet_grid(. ~ supp)
+ xlab("Dose [mg]")
+ ylab("Tooth length")
+ guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity") +
facet_grid(. ~ supp) +
xlab("Dose [mg]") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Dose"))
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length"))
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length")
ggplot(data=tg, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity") +
facet_grid(. ~ supp) +
xlab("Dose [mg]") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Delivery method"))
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length")
+
guides(fill=guide_legend(title="Dose"))
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Dose"))
ggplot(data=tg, aes(x=supp, y=len, fill=dose) +
geom_boxplot() +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len, fill=dose) +
geom_boxplot() +
xlab("Supplement") +
ylab("Tooth length")
?geom_boxplot
ggplot(data=tg, aes(x=supp, y=len, fill=dose) +
geom_boxplot(aes(fill=supp)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len, fill=dose) +
geom_boxplot(aes(fill=supp)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len, fill=dose) +
geom_boxplot(aes(fill=supp)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len) +
geom_boxplot(aes(fill=supp)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=supp)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose [mg]") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Supplement") +
ylab("Tooth length")
ggplot(data=tg, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Supplement") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Dose"))
t.test(len ~ supp,tg[tg$dose==0.5,],paired=FALSE,var.equal=TRUE)
t.test(len ~ supp,tg[tg$dose==1,],paired=FALSE,var.equal=TRUE)
t.test(len ~ supp,tg[tg$dose==2,],paired=FALSE,var.equal=TRUE)
t.test(len ~ dose,tg[tg$dose!=2,],paired=FALSE, var.equal=TRUE)
t.test(len ~ dose,tg[tg$dose!=0.5,],paired=FALSE, var.equal=TRUE)
setwd("F:/documents/Dev/R/05_ReproducibleResearch")
setwd("F:/documents/Dev/R/05_ReproducibleResearch/PeerAssessment2")
?select
require(plyr)
?select
require(dplyr)
?select
data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"), header = TRUE, stringsAsFactors = FALSE)
dmg_data <- select(data,c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PRODPDMGEXP","CROPDMG","CROPDMGEXP"))
?select
dmg_data <- select(data,EVTYPE,FATALITIES,INJURIES,PROPDMG,PRODPDMGEXP,CROPDMG,CROPDMGEXP)
dmg_data <- select(data,EVTYPE,FATALITIES,INJURIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
unique(dmg_data$PROPDMGEXP)
levels(dmg_data$PROPDMGEXP)
class(dmg_data$PROPDMGEXP)
# Replace the exponent information, in order of appearance
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "K"] <- 1000
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "M"] <- 1e+06
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == ""] <- 1
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "B"] <- 1e+09
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "m"] <- 1e+06
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "0"] <- 1
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "5"] <- 1e+05
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "6"] <- 1e+06
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "4"] <- 10000
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "2"] <- 100
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "3"] <- 1000
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "h"] <- 100
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "7"] <- 1e+07
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "H"] <- 100
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "1"] <- 10
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "8"] <- 1e+08
# Invalid data is set to 0, so it will not be added in the computation
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "+"] <- 0
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "-"] <- 0
dmg_data$PROPEXP[dmg_data$PROPDMGEXP == "?"] <- 0
# Compute the property damage
dmg_data$PROPDMGVAL <- dmg_data$PROPDMG*dmg_data$PROPEXP
unique(dmg_data$CROPDMGEXP)
# Replace the exponent information, in order of appearance
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "M"] <- 1e+06
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "K"] <- 1000
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "m"] <- 1e+06
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "B"] <- 1e+09
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "0"] <- 1
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "k"] <- 1000
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "2"] <- 100
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == ""] <- 1
# Invalid data is set to 0, so it will not be added in the computation
dmg_data$CROPEXP[dmg_data$CROPDMGEXP == "?"] <- 0
# Compute the crop damage
dmg_data$CROPDMGVAL <- dmg_data$CROPDMG * dmg_data$CROPEXP
?summarize
?ddply
?summarise
fatalities <- summarise(group_by(dmg_data,ENVTYPE),sum(FATALITIES))
injuries <- summarise(group_by(dmg_data,ENVTYPE),sum(INJURIES))
propdmg <- summarise(group_by(dmg_data,ENVTYPE),sum(PROPDMG.VAL))
cropdmg <- summarise(group_by(dmg_data,ENVTYPE),sum(CROPDMG.VAL))
fatalities <- summarise(group_by(dmg_data,EVTYPE),sum(FATALITIES))
injuries <- summarise(group_by(dmg_data,EVTYPE),sum(INJURIES))
propdmg <- summarise(group_by(dmg_data,EVTYPE),sum(PROPDMG.VAL))
cropdmg <- summarise(group_by(dmg_data,EVTYPE),sum(CROPDMG.VAL))
dmg_data$CROPDMG.VAL <- dmg_data$CROPDMG * dmg_data$CROPEXP
dmg_data$PROPDMG.VAL <- dmg_data$PROPDMG*dmg_data$PROPEXP
propdmg <- summarise(group_by(dmg_data,EVTYPE),sum(PROPDMG.VAL))
cropdmg <- summarise(group_by(dmg_data,EVTYPE),sum(CROPDMG.VAL))
View(fatalities)
fatalities <- summarise(group_by(dmg_data,EVTYPE),FATALITIES.TOTAL = sum(FATALITIES))
fatalities <- arrange(fatalities,desc(FATALITIES.TOTAL))
View(fatalities)
fatalities <- summarise(group_by(dmg_data,EVTYPE),FATALITIES.TOTAL = sum(FATALITIES))
fatalities <- arrange(fatalities,desc(FATALITIES.TOTAL))
injuries <- summarise(group_by(dmg_data,EVTYPE),INJURIES.TOTAL = sum(INJURIES))
injuries <- arrange(injuries,desc(INJURIES.TOTAL))
propdmg <- summarise(group_by(dmg_data,EVTYPE),PROPDMG.VAL.TOTAL = sum(PROPDMG.VAL))
propdmg <- arrange(propdmg,desc(PROPDMG.VAL.TOTAL))
cropdmg <- summarise(group_by(dmg_data,EVTYPE),CROPDMG.VAL.TOTAL = sum(CROPDMG.VAL))
cropdmg <- arrange(cropdmg,desc(CROPDMG.VAL.TOTAL))
?melt
ggplot(fatalities,aes(x=reorder(EVTYPE,-value),y=value,fill=variable))
ggplot(fatalities,aes(x=reorder(EVTYPE,-value),y=value,fill=variable)) + geom_bar(stat="identity")
ggplot(fatalities,aes(x=fatalities$FATALITIES.TOTAL,y=value,fill=variable)) + geom_bar(stat="identity")
ggplot(fatalities,aes(x=EVTYPE,y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
ggplot(fatalities[10,],aes(x=EVTYPE,y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
ggplot(fatalities[,10],aes(x=EVTYPE,y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
View(fatalities)
fatalities <- head(fatalities,10)
ggplot(fatalities,aes(x=EVTYPE,y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
ggplot(fatalities,aes(x=reorder(EVTYPE,FATALITIES.TOTAL),y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) + geom_bar(stat="identity")
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) + geom_bar(stat="identity") + labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)")
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) + geom_bar(stat="identity") + labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
?mfrow
??mfrow
par(mfrow = c(2,1))
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
par(mfrow = c(2,1))
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 most impactful weather events in the US (by total injuries)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
fatalities <- head(fatalities,10)
injuries <- head(injuries,10)
par(mfrow = c(2,1))
ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 most impactful weather events in the US (by total injuries)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
require(gridExtra)
library(gridExtra)
library("gridExtra")
fatalities <- head(fatalities,10)
injuries <- head(injuries,10)
p1 <- ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 most impactful weather events in the US (by total injuries)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
multiplot(p1,p2,cols=2)
?multiplot
library(multiplot)
install.packages(multiplot)
install.packages("multiplot")
install.packages("gridExtra")
library(gridExtra)
p1 <- ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events in the US (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 most impactful weather events in the US (by total injuries)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 most impactful weather events (by total fatalities)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 most impactful weather events (by total injuries)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
propdmg <- head(propdmg,10)
cropdmg <- head(cropdmg,10)
p1 <- ggplot(propdmg,aes(x=reorder(EVTYPE,-PROPDMG.VAL.TOTAL),y=PROPDMG.VAL.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Property damage", title="Top 10 by total fatalities") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(cropdmg,aes(x=reorder(EVTYPE,-CROPDMG.VAL.TOTAL),y=CROPDMG.VAL.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Crop damage", title="Top 10 by total injuries") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
fatalities <- head(fatalities,10)
injuries <- head(injuries,10)
p1 <- ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 by total fatalities") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 by total injuries") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
propdmg <- head(propdmg,10)
cropdmg <- head(cropdmg,10)
p1 <- ggplot(propdmg,aes(x=reorder(EVTYPE,-PROPDMG.VAL.TOTAL/10^9),y=PROPDMG.VAL.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Property damage [$ billions]", title="Top 10 by property damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(cropdmg,aes(x=reorder(EVTYPE,-CROPDMG.VAL.TOTAL/10^9),y=CROPDMG.VAL.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Crop damage [$ billions]", title="Top 10 by crop damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
propdmg <- head(propdmg,10)
cropdmg <- head(cropdmg,10)
p1 <- ggplot(propdmg,aes(x=reorder(EVTYPE,-PROPDMG.VAL.TOTAL),y=PROPDMG.VAL.TOTAL/10^9)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Property damage [$ billions]", title="Top 10 by property damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(cropdmg,aes(x=reorder(EVTYPE,-CROPDMG.VAL.TOTAL),y=CROPDMG.VAL.TOTAL/10^9)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Crop damage [$ billions]", title="Top 10 by crop damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
propdmg <- head(propdmg,10)
cropdmg <- head(cropdmg,10)
p1 <- ggplot(propdmg,aes(x=reorder(EVTYPE,-PROPDMG.VAL.TOTAL),y=PROPDMG.VAL.TOTAL/10^9)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Property damage [$ billions]", title="Top 10 by property damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(cropdmg,aes(x=reorder(EVTYPE,-CROPDMG.VAL.TOTAL),y=CROPDMG.VAL.TOTAL/10^9)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Crop damage [$ billions]", title="Top 10 by crop damage") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
fatalities <- head(fatalities,10)
injuries <- head(injuries,10)
p1 <- ggplot(fatalities,aes(x=reorder(EVTYPE,-FATALITIES.TOTAL),y=FATALITIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Fatalities", title="Top 10 by total fatalities") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- ggplot(injuries,aes(x=reorder(EVTYPE,-INJURIES.TOTAL),y=INJURIES.TOTAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Injuries", title="Top 10 by total injuries") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, ncol=2)
require(ggplot2)
require(gridExtra)
require(dplyr)
dmg_data <- select(data,EVTYPE,FATALITIES,INJURIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
